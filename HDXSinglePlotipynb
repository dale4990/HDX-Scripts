{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "12d4cb3b-0e37-4146-84d7-484c30854b16",
   "metadata": {},
   "source": [
    "\"\"\"\n",
    "Created on Thurs Jul 7 2021\n",
    "\n",
    "@author: daniellee\n",
    "\n",
    "Script to graph peptides based on the residue range\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "13babc6e-3703-411d-b144-6e80914053b8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Plot G7-0P, G7-2P, G17-0P, G17-2P? g17-2p\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Protein</th>\n",
       "      <th>Start</th>\n",
       "      <th>End</th>\n",
       "      <th>Sequence</th>\n",
       "      <th>Modification</th>\n",
       "      <th>Fragment</th>\n",
       "      <th>MaxUptake</th>\n",
       "      <th>MHP</th>\n",
       "      <th>State</th>\n",
       "      <th>Exposure</th>\n",
       "      <th>File</th>\n",
       "      <th>z</th>\n",
       "      <th>RT</th>\n",
       "      <th>Inten</th>\n",
       "      <th>Center</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>AAAAAAGPEM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>859.3978</td>\n",
       "      <td>Apo-2P</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1142021JA_2Perk_UL1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.060234</td>\n",
       "      <td>10317742.0</td>\n",
       "      <td>859.883597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>AAAAAAGPEM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>859.3978</td>\n",
       "      <td>Apo-2P</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1142021JA_2Perk_UL2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.052950</td>\n",
       "      <td>10896670.0</td>\n",
       "      <td>859.869524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>AAAAAAGPEM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>859.3978</td>\n",
       "      <td>Apo-2P</td>\n",
       "      <td>0.001000</td>\n",
       "      <td>1152021JA_2Perk_apo_q</td>\n",
       "      <td>1</td>\n",
       "      <td>4.073631</td>\n",
       "      <td>9855878.0</td>\n",
       "      <td>860.308254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>AAAAAAGPEM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>859.3978</td>\n",
       "      <td>Apo-2P</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1152021JA_2Perk_apo_30s</td>\n",
       "      <td>1</td>\n",
       "      <td>4.068829</td>\n",
       "      <td>7110445.0</td>\n",
       "      <td>864.774574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>AAAAAAGPEM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>859.3978</td>\n",
       "      <td>Apo-2P</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1152021JA_2Perk_apo_1m</td>\n",
       "      <td>1</td>\n",
       "      <td>4.066907</td>\n",
       "      <td>7359160.0</td>\n",
       "      <td>864.886843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3888</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>349</td>\n",
       "      <td>357</td>\n",
       "      <td>ARFQPGYRS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1081.5538</td>\n",
       "      <td>G17-2P</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1192021JA_2Perk_G17_16m</td>\n",
       "      <td>2</td>\n",
       "      <td>3.422172</td>\n",
       "      <td>2357794.0</td>\n",
       "      <td>543.822252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3889</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>349</td>\n",
       "      <td>357</td>\n",
       "      <td>ARFQPGYRS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1081.5538</td>\n",
       "      <td>G17-2P</td>\n",
       "      <td>30.000002</td>\n",
       "      <td>1182021JA_2Perk_G17_30m</td>\n",
       "      <td>2</td>\n",
       "      <td>3.433396</td>\n",
       "      <td>2532563.0</td>\n",
       "      <td>543.819269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3890</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>349</td>\n",
       "      <td>357</td>\n",
       "      <td>ARFQPGYRS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1081.5538</td>\n",
       "      <td>G17-2P</td>\n",
       "      <td>60.000004</td>\n",
       "      <td>1182021JA_2Perk_G17_60m</td>\n",
       "      <td>2</td>\n",
       "      <td>3.429495</td>\n",
       "      <td>2693214.0</td>\n",
       "      <td>543.795846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3891</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>349</td>\n",
       "      <td>357</td>\n",
       "      <td>ARFQPGYRS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1081.5538</td>\n",
       "      <td>G17-2P</td>\n",
       "      <td>90.000008</td>\n",
       "      <td>1182021JA_2Perk_G17_90m</td>\n",
       "      <td>2</td>\n",
       "      <td>3.428394</td>\n",
       "      <td>2435139.0</td>\n",
       "      <td>543.810967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3892</th>\n",
       "      <td>G17-2P</td>\n",
       "      <td>349</td>\n",
       "      <td>357</td>\n",
       "      <td>ARFQPGYRS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1081.5538</td>\n",
       "      <td>G17-2P</td>\n",
       "      <td>180.000015</td>\n",
       "      <td>1192021JA_2Perk_G17_180m</td>\n",
       "      <td>2</td>\n",
       "      <td>3.410962</td>\n",
       "      <td>2286287.0</td>\n",
       "      <td>543.787200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3893 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Protein  Start  End    Sequence  Modification  Fragment  MaxUptake  \\\n",
       "0     G17-2P      1   10  AAAAAAGPEM           NaN       NaN        8.0   \n",
       "1     G17-2P      1   10  AAAAAAGPEM           NaN       NaN        8.0   \n",
       "2     G17-2P      1   10  AAAAAAGPEM           NaN       NaN        8.0   \n",
       "3     G17-2P      1   10  AAAAAAGPEM           NaN       NaN        8.0   \n",
       "4     G17-2P      1   10  AAAAAAGPEM           NaN       NaN        8.0   \n",
       "...      ...    ...  ...         ...           ...       ...        ...   \n",
       "3888  G17-2P    349  357   ARFQPGYRS           NaN       NaN        7.0   \n",
       "3889  G17-2P    349  357   ARFQPGYRS           NaN       NaN        7.0   \n",
       "3890  G17-2P    349  357   ARFQPGYRS           NaN       NaN        7.0   \n",
       "3891  G17-2P    349  357   ARFQPGYRS           NaN       NaN        7.0   \n",
       "3892  G17-2P    349  357   ARFQPGYRS           NaN       NaN        7.0   \n",
       "\n",
       "            MHP   State    Exposure                      File  z        RT  \\\n",
       "0      859.3978  Apo-2P    0.000000       1142021JA_2Perk_UL1  1  4.060234   \n",
       "1      859.3978  Apo-2P    0.000000       1142021JA_2Perk_UL2  1  4.052950   \n",
       "2      859.3978  Apo-2P    0.001000     1152021JA_2Perk_apo_q  1  4.073631   \n",
       "3      859.3978  Apo-2P    0.500000   1152021JA_2Perk_apo_30s  1  4.068829   \n",
       "4      859.3978  Apo-2P    1.000000    1152021JA_2Perk_apo_1m  1  4.066907   \n",
       "...         ...     ...         ...                       ... ..       ...   \n",
       "3888  1081.5538  G17-2P   16.000000   1192021JA_2Perk_G17_16m  2  3.422172   \n",
       "3889  1081.5538  G17-2P   30.000002   1182021JA_2Perk_G17_30m  2  3.433396   \n",
       "3890  1081.5538  G17-2P   60.000004   1182021JA_2Perk_G17_60m  2  3.429495   \n",
       "3891  1081.5538  G17-2P   90.000008   1182021JA_2Perk_G17_90m  2  3.428394   \n",
       "3892  1081.5538  G17-2P  180.000015  1192021JA_2Perk_G17_180m  2  3.410962   \n",
       "\n",
       "           Inten      Center  \n",
       "0     10317742.0  859.883597  \n",
       "1     10896670.0  859.869524  \n",
       "2      9855878.0  860.308254  \n",
       "3      7110445.0  864.774574  \n",
       "4      7359160.0  864.886843  \n",
       "...          ...         ...  \n",
       "3888   2357794.0  543.822252  \n",
       "3889   2532563.0  543.819269  \n",
       "3890   2693214.0  543.795846  \n",
       "3891   2435139.0  543.810967  \n",
       "3892   2286287.0  543.787200  \n",
       "\n",
       "[3893 rows x 15 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "inhib = input(\"Plot G7-0P, G7-2P, G17-0P, G17-2P?\")\n",
    "\n",
    "if inhib in ['G7-0P','g7-0P','7-0P','G7-0p','g7-0p','7-0p','g70p','7-0']:\n",
    "    raw_data = pd.read_csv('HDX_WT_G7_0P_FT_DL_Final_Data_Cluster.csv')\n",
    "    protein = 'G7-0P'\n",
    "elif inhib in ['G7-2P','g7-2P','7-2P','G7-2p','g7-2p','7-2p','g72p','7-2']:\n",
    "    raw_data = pd.read_csv('HDX_WT_G7_2P_FT_DL_Final_Data_Cluster.csv')\n",
    "    protein = 'G7-2P'\n",
    "elif inhib in ['G17-0P','g17-0P','17-0P','G17-0p','g17-0p','17-0p','g170p','17-0']:\n",
    "    raw_data = pd.read_csv('HDX_WT_G17_0P_FT_DL_Final_Data_Cluster.csv')\n",
    "    protein = 'G17-0P'\n",
    "elif inhib in ['G17-2P','g17-2P','17-2P','G17-2p','g17-2p','17-2p','g172p','17-2']:\n",
    "    raw_data = pd.read_csv('HDX_WT_G17_2P_FT_DL_Final_Data_Cluster.csv')\n",
    "    protein = 'G17-2P'\n",
    "\n",
    "df = pd.DataFrame(raw_data)\n",
    "display(raw_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d0720b6-d544-4591-8b86-879dbb696120",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Input start residue:  1\n",
      "\n",
      "Input end residue:  16\n",
      "\n",
      "G or Apo?  g\n",
      "\n",
      "Log or linear scale?  lin\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "start = int(input(\"\\nInput start residue: \"))\n",
    "end = int(input(\"\\nInput end residue: \"))\n",
    "state = input(\"\\nG or Apo? \")\n",
    "scale = input(\"\\nLog or linear scale? \")\n",
    "\n",
    "if state in ['Apo', 'apo', 'a', 'A']:\n",
    "    state = 'Apo-0P'\n",
    "elif (state in ['G', 'g']) & (protein == 'G7-0P'):\n",
    "    state = 'G7-0P'\n",
    "elif (state in ['G', 'g']) & (protein == 'G7-2P'):\n",
    "    state = '2P-G7'\n",
    "elif (state in ['G', 'g']) & (protein == 'G17-0P'):\n",
    "    state = 'G17-0P'\n",
    "elif (state in ['G', 'g']) & (protein == 'G17-2P'):\n",
    "    state = 'G17-2P'\n",
    "\n",
    "sub_range = df[(df['Start'] == start) & (df['End'] == end) & (df['State'] == state)]\n",
    "x = sub_range.iloc[:,9]\n",
    "y = sub_range.iloc[:,14]\n",
    "sequence = sub_range['Sequence'].values[3]\n",
    "#print(sequence)\n",
    "\n",
    "plt.figure(figsize = (10,6))\n",
    "plt.plot(x, y, marker = 's')\n",
    "plot_title = [protein, str(start) + \"-\" + str(end), sequence]\n",
    "plt.title(\" \".join(plot_title))\n",
    "plt.ylabel(\"Relative Uptake (Da)\")\n",
    "plt.xlabel(\"Exposure Time (Minutes)\")\n",
    "\n",
    "if scale in ['log', 'Log']:\n",
    "    plt.yscale('log')\n",
    "    plt.xscale('log')\n",
    "elif scale in ['linear', 'Linear', 'lin', 'Lin']:\n",
    "    plt.yscale('linear')\n",
    "    plt.xscale('linear')\n",
    "    \n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "722cf2a1-f793-4169-a872-ffe1750adffd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
